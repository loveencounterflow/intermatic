{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nfreeze                    = Object.freeze\nunless globalThis.debug?  then debug  = console.debug\nunless globalThis.rpr?    then rpr    = JSON.stringify\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nset = ( target, key, value ) ->\n  if target[ key ]?\n    throw new Error \"^interstate/set@776^ name collision: #{rpr key}\"\n  target[ key ] = value\n  return value\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intermatic\n\n  #---------------------------------------------------------------------------------------------------------\n  @_tid: 0\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( fsmd ) ->\n    # validate.fsmd fsmd\n    @_tmp               = {}\n    @_tmp.fsmd          = { fsmd..., }\n    @_tmp.known_names   = new Set()\n    @triggers           = {}\n    @lstates            = null\n    @fsm_names          = []\n    @has_subfsms        = false\n    @_lstate            = 'void'\n    @before             = {}\n    @enter              = {}\n    @stay               = {}\n    @leave              = {}\n    @after              = {}\n    @up                 = null\n    @_path              = null\n    @_compile_fail()\n    @_compile_cyclers()\n    @_compile_triggers()\n    @_compile_transitioners()\n    @_compile_handlers()\n    @_compile_goto()\n    @_compile_can()\n    @_compile_tryto()\n    @_compile_subfsms()\n    @_copy_other_attributes()\n    delete @_tmp\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Object.defineProperties @prototype,\n    #-------------------------------------------------------------------------------------------------------\n    lstate:\n      get:            -> @_lstate\n      set: ( lstate ) ->\n        if typeof lstate isnt 'string'\n          throw new Error \"^interstate/set/lstate@501^ lstate name must be text, got #{rpr lstate}\"\n        @_lstate = lstate\n    #-------------------------------------------------------------------------------------------------------\n    cstate:\n      get: ->\n        return @lstate unless @has_subfsms\n        R = { _: @lstate, }\n        R[ subfsm_name ] = @[ subfsm_name ].cstate for subfsm_name in @fsm_names\n        return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    fsms:\n      get: -> ( @[ subfsm_name ] for subfsm_name in @fsm_names )\n    #-------------------------------------------------------------------------------------------------------\n    path:\n      get: ->\n        return R if ( R = @_path )?\n        return @_path = if @up? then \"#{@up.path}/#{@name}\" else @name\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ( trigger ) ->\n    throw new Error \"^interstate/fail@556^ trigger not allowed: (#{rpr @name}) #{rpr trigger}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fail: ->\n    @_tmp.known_names.add 'fail'\n    return null unless ( fail = @_tmp.fsmd.fail )?\n    @fail = fail.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_cyclers: ->\n    @_tmp.known_names.add 'cyclers'\n    triggers = @_tmp.fsmd.triggers = [ ( @_tmp.fsmd.triggers ? [] )..., ]\n    return null unless ( cyclers = @_tmp.fsmd.cyclers )?\n    #.......................................................................................................\n    for tname, lstates of cyclers\n      for cur_lstate, cur_idx in lstates\n        nxt_idx     = ( cur_idx + 1 ) %% lstates.length\n        nxt_lstate  = lstates[ nxt_idx ]\n        triggers.push [ cur_lstate, tname, nxt_lstate, ]\n    #.......................................................................................................\n    # freeze @_tmp.fsmd\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_triggers: ->\n    has_start     = false\n    @starts_with  = null\n    starred       = {}\n    lstates       = new Set [ 'void', ]\n    triggers      = @_tmp.fsmd.triggers ### already a copy at this point, see @_compile_cyclers ###\n    tnames        = new Set ( t[ 1 ] for t in triggers )\n    #.......................................................................................................\n    unless tnames.has 'start'\n      first_lstate = triggers[ 0 ]?[ 2 ] ? 'void'\n      triggers.unshift [ 'void', 'start', first_lstate, ]\n    #.......................................................................................................\n    for triplet in triggers\n      ### TAINT validate.list_of.list triplet ###\n      ### TAINT validate.tname tname ###\n      ### TAINT validate that free of collision ###\n      [ from_lstate, tname, to_lstate, ] = triplet\n      #.....................................................................................................\n      ### TAINT also validate that tuples [ from_lstate, tname, ] unique ###\n      if tname is 'start'\n        throw new Error \"^interstate/fail@556^ duplica declaration of `start`: #{rpr triplet}\" if has_start\n        has_start     = true\n        @starts_with  = to_lstate\n      #.....................................................................................................\n      ### Special-case starred triggers: ###\n      if from_lstate is '*'\n        starred[ tname ] = to_lstate\n        continue\n      #.....................................................................................................\n      lstates.add from_lstate\n      lstates.add to_lstate\n      set ( @triggers[ tname ] ?= {} ), from_lstate, to_lstate\n    #.......................................................................................................\n    for starred_name, to_lstate of starred\n      for from_lstate from lstates\n        set ( @triggers[ starred_name ] ?= {} ), from_lstate, to_lstate\n    #.......................................................................................................\n    @lstates = freeze [ lstates..., ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_tid: -> tid = ++@constructor._tid; return \"t#{tid}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transitioner: ( tname, from_and_to_lstates = null ) ->\n    ### TAINT too much logic to be done at in run time, try to precompile more ###\n    $key = '^trigger'\n    return transitioner = ( P... ) =>\n      ### TAINT use single transitioner method for all triggers? ###\n      from_lstate = @lstate\n      id          = @_new_tid()\n      #-------------------------------------------------------------------------------------------------\n      if from_and_to_lstates?\n        unless ( to_lstate = from_and_to_lstates[ @lstate ] )?\n          trigger = freeze { $key, id, failed: true, from: from_lstate, via: tname, }\n          return @fail trigger\n      else\n        [ to_lstate, P..., ] = P\n      #-------------------------------------------------------------------------------------------------\n      changed     = to_lstate isnt from_lstate\n      trigger     = freeze { $key, id, from: from_lstate, via: tname, to: to_lstate, changed, }\n      ### TAINT add extra arguments P ###\n      @before.any?              trigger\n      @before.change?           trigger if changed\n      @before[ tname        ]?  trigger\n      @leave.any?               trigger if changed\n      @leave[  from_lstate  ]?  trigger if changed\n      @lstate = to_lstate if changed\n      @stay.any?                trigger if not changed\n      @stay[   to_lstate    ]?  trigger if not changed\n      @enter.any?               trigger if changed\n      @enter[  to_lstate    ]?  trigger if changed\n      @after[  tname        ]?  trigger\n      @after.change?            trigger if changed\n      @after.any?               trigger\n      # if @up?.after.cchange?\n      #   debug '^3338398^', @up?.after.cchange, trigger\n      #   @up.after.cchange trigger\n      # @up?.after.cchange?       trigger if changed\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_transitioners: ->\n    @_tmp.known_names.add 'triggers'\n    for tname, from_and_to_lstates of @triggers\n      do ( tname, from_and_to_lstates ) =>\n        ### NOTE we *could* allow custom transitioners but that would only replicate behavior available\n        via `fsm.before[ tname ]()`, `fsm.after[ tname ]()`:\n        transitioner = @_tmp.fsmd[ tname ] ? @_get_transitioner tname, from_and_to_lstates ###\n        transitioner = @_get_transitioner tname, from_and_to_lstates\n        set @, tname, transitioner\n        @_tmp.known_names.add tname\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_handlers: ->\n    ### TAINT add handlers for trigger, change ###\n    ### TAINT check names against reserved ###\n    for category in [ 'before', 'enter', 'stay', 'leave', 'after', ]\n      @_tmp.known_names.add category\n      for name, handler of @_tmp.fsmd[ category ] ? {}\n        @[ category ][ name ] = handler.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_goto: ->\n    @_tmp.known_names.add 'goto'\n    if ( goto = @_tmp.fsmd.goto )?\n      unless goto is '*'\n        throw new Error \"^interstate/_compile_handlers@776^ expected '*' for key `goto`, got #{rpr goto}\"\n      transitioner = @_get_transitioner 'goto', null\n      goto = ( to_lstate, P... ) => transitioner to_lstate, P...\n      for to_lstate in @lstates\n        goto[ to_lstate ] = ( P... ) => transitioner to_lstate, P...\n      set @, 'goto', goto\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_can: ->\n    @_tmp.known_names.add 'can'\n    can = ( tname ) =>\n      unless ( trigger = @triggers[ tname ] )?\n        throw new Error \"^interstate/can@822^ unknown trigger #{rpr tname}\"\n      return trigger[ @lstate ]?\n    for tname of @triggers\n      can[ tname ] = ( P... ) => can tname, P...\n    set @, 'can', can\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_tryto: ->\n    @_tmp.known_names.add 'tryto'\n    tryto = ( tname, P... ) =>\n      return false unless @can tname\n      ### TAINT we will possibly want to return some kind of result from trigger ###\n      @[ tname ] P...\n      return true\n    for tname of @triggers\n      tryto[ tname ] = ( P... ) => tryto tname, P...\n    set @, 'tryto', tryto\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_subfsms: ->\n    @_tmp.known_names.add 'fsms'\n    fsm_names = []\n    for sub_fname, sub_fsmd of @_tmp.fsmd.fsms ? {}\n      sub_fsmd  = { sub_fsmd..., }\n      if sub_fsmd.name? and sub_fsmd.name isnt sub_fname\n        throw new Error \"^interstate/_compile_subfsms@506^ name mismatch, got #{rpr sub_fname}, #{rpr sub_fsmd.name}\"\n      sub_fsmd.name = sub_fname\n      set sub_fsmd, 'up', @\n      @_tmp.known_names.add sub_fname\n      fsm_names.push   sub_fname\n      set @, sub_fname, new @constructor sub_fsmd\n    @fsm_names    = freeze fsm_names\n    @has_subfsms  = fsm_names.length > 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _copy_other_attributes: ->\n    for pname, propd of Object.getOwnPropertyDescriptors @_tmp.fsmd\n      continue if @_tmp.known_names.has pname\n      Object.defineProperty @, pname, propd\n    return null\n\n\n############################################################################################################\nmodule.exports = Intermatic\n# if globalThis.require? then module.exports        = { Intermatic, }\n# else                        globalThis.Intermatic = Intermatic\n\n\n\n"
  ]
}