{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nfreeze                    = Object.freeze\nunless globalThis.debug?  then debug  = console.debug\nunless globalThis.rpr?    then rpr    = JSON.stringify\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nset = ( target, key, value ) ->\n  if target[ key ]?\n    throw new Error \"^intermatic/set@776^ name collision: #{rpr key}\"\n  target[ key ] = value\n  return value\n\n#-----------------------------------------------------------------------------------------------------------\npush_circular = ( xs, x, max_length = 1 ) ->\n  R = [ xs..., x, ]\n  R.shift() while R.length > max_length\n  return freeze R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intermatic\n\n  #---------------------------------------------------------------------------------------------------------\n  @_tid: 0\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( fsmd ) ->\n    # validate.fsmd fsmd\n    @_tmp               = {}\n    @_tmp.fsmd          = { fsmd..., }\n    @_tmp.known_names   = new Set()\n    @moves              = {}\n    @cascades           = null\n    @lstates            = null\n    @fsm_names          = []\n    @has_subfsms        = false\n    @_lstate            = 'void'\n    @trigger_actions    = freeze [ 'before', 'after', ]\n    @state_actions      = freeze [ 'enter', 'leave', 'stay', ]\n    @data               = null\n    @history_length     = 1\n    @_prv_lstates       = [ @_lstate, ]\n    @_prv_verbs         = []\n    @_nxt_dpar          = null\n    @_nxt_dest          = null\n    @_nxt_verb          = null\n    @up                 = null\n    @_path              = null\n    @_compile_fail()\n    # @_compile_cyclers()\n    @_compile_moves()\n    @_compile_transitioners()\n    # @_compile_handlers()\n    # @_compile_goto()\n    # @_compile_can()\n    # @_compile_tryto()\n    # @_compile_subfsms()\n    # @_compile_data()\n    # @_compile_cascades()\n    # @_copy_other_attributes()\n    delete @_tmp\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Object.defineProperties @prototype,\n    #-------------------------------------------------------------------------------------------------------\n    lstate:\n      get:            -> @_lstate\n      set: ( lstate ) ->\n        if typeof lstate isnt 'string'\n          throw new Error \"^intermatic/set/lstate@501^ lstate name must be text, got #{rpr lstate}\"\n        @_prv_lstates = push_circular @_prv_lstates, lstate, @history_length + 1\n        @_lstate      = lstate\n    #-------------------------------------------------------------------------------------------------------\n    cstate:\n      get: ->\n        R                 = {}\n        R.path            = @path\n        R.lstate          = @lstate\n        R.verb            = x if ( x = @verb    )?\n        R.dpar            = x if ( x = @dpar    )?\n        R.dest            = x if ( x = @dest    )?\n        R.changed         = x if ( x = @changed )? and x\n        R.failed          = true if ( @dpar? and not @dest? )\n        R.data            = freeze { x..., } if ( x = @data )?\n        R[ subfsm_name ]  = @[ subfsm_name ].cstate for subfsm_name in @fsm_names\n        return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    EXP_cstate:\n      get: ->\n        R                 = {}\n        R.lstate          = @lstate\n        R.data            = freeze { x..., } if ( x = @data )?\n        R[ subfsm_name ]  = @[ subfsm_name ].EXP_cstate for subfsm_name in @fsm_names\n        return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    EXP_dstate:\n      get: ->\n        target        = { lstate: @lstate, }\n        R             = { [@name]: target, }\n        target.data   = @data if @data?\n        for subfsm_name in @fsm_names\n          sub_fsm = @[ subfsm_name ]\n          Object.assign target, sub_fsm.EXP_dstate\n        freeze target\n        return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    dpar: get: -> @_nxt_dpar\n    dest: get: -> @_nxt_dest\n    verb: get: -> @_nxt_verb\n    move: get: -> freeze { verb: @verb, dpar: @dpar, dest:@dest, }\n    fsms: get: -> ( @[ subfsm_name ] for subfsm_name in @fsm_names )\n    #-------------------------------------------------------------------------------------------------------\n    changed:\n      get: ->\n        return null unless @_nxt_dpar? and @_nxt_dest?\n        return @_nxt_dpar isnt @_nxt_dest\n    #-------------------------------------------------------------------------------------------------------\n    path:\n      get: ->\n        return R if ( R = @_path )?\n        return @_path = if @up? then \"#{@up.path}/#{@name}\" else @name\n    #-------------------------------------------------------------------------------------------------------\n    history:\n      get: ->\n        R = []\n        for verb, idx in @_prv_verbs\n          dpar  = @_prv_lstates[ idx ]\n          dest  = @_prv_lstates[ idx + 1 ]\n          R.push freeze { verb, dpar, dest, }\n        return freeze R\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ->\n    throw new Error \"^intermatic/fail@557^ trigger not allowed: #{rpr { name: @name, verb: @verb, dpar: @dpar, }}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fail: ->\n    @_tmp.known_names.add 'fail'\n    return null unless ( fail = @_tmp.fsmd.fail )?\n    @fail = fail.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_moves: ->\n    starred       = {}\n    lstates       = new Set [ 'void', ]\n    moves         = @_tmp.fsmd.moves = { ( @_tmp.fsmd.moves ? {} )..., }\n    verbs         = ( verb for verb of moves )\n    #.......................................................................................................\n    unless moves.start?\n      ### TAINT validate.nonempty_text moves.start ###\n      ### TAINT validate.nonempty_list verbs ###\n      ### TAINT validate.nonempty_list moves[ verbs[ 0 ] ][ 0 ] ###\n      first_lstate  = moves[ verbs[ 0 ] ][ 0 ] ? 'void'\n      moves.start   = [ 'void', first_lstate, ]\n    #.......................................................................................................\n    for verb, trajectory of moves\n      #.....................................................................................................\n      ### If the verb is `start`, then value may be just the name of the start verb instead of a list ###\n      ### TAINT validate.nonempty_text trajectory ###\n      if ( verb is 'start' ) and ( typeof trajectory is 'string' )\n        trajectory = [ 'void', trajectory, ]\n      #.....................................................................................................\n      for tidx in [ 0 ... trajectory.length - 1 ]\n        ### TAINT validate.list_of.list triplet ###\n        ### TAINT validate.verb verb ###\n        ### TAINT validate that free of collision ###\n        dpar  = trajectory[ tidx ]\n        dest  = trajectory[ tidx + 1 ]\n        #...................................................................................................\n        lstates.add dpar\n        lstates.add dest\n        set ( @moves[ verb ] ?= {} ), dpar, dest\n    #.......................................................................................................\n    @lstates = freeze [ lstates..., ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_transitioners: ->\n    @_tmp.known_names.add 'moves'\n    for verb, dests_by_deps of @moves\n      do ( verb, dests_by_deps ) =>\n        transitioner = @_get_transitioner verb, dests_by_deps\n        ### Attach lifecycle handlers to transitioner such that `fsmd[verb].before` becomes\n        `fsm[verb].before` and so on: ###\n        for lifecycle, handlers of ( @_tmp.fsmd[ verb ] ? {} )\n          handlers = [ handlers, ] unless ( Array.isArray handlers )\n          set transitioner, lifecycle, handlers\n        set @, verb, transitioner\n        @_tmp.known_names.add verb\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transitioner: ( verb, dests_by_deps = null ) ->\n    ### TAINT add extra arguments P ###\n    ### TAINT too much logic to be done at in run time, try to precompile more ###\n    return transitioner = ( P... ) =>\n      ### TAINT use single transitioner method for all triggers? ###\n      @_nxt_verb      = verb\n      ### TAINT consider to do this inside a property setter, as for `@lstate`: ###\n      @_prv_verbs     = push_circular @_prv_verbs, verb, @history_length\n      @_nxt_dpar      = dpar = @lstate\n      # id              = @_new_tid()\n      #-------------------------------------------------------------------------------------------------\n      # if not dests_by_deps?\n      #   debug '^374873^', verb, P\n      if dests_by_deps? then    dest          = ( dests_by_deps[ dpar ] ? null )\n      else                    [ dest, P..., ] = P\n      return @fail P... unless dest?\n      @_nxt_dest = dest\n      #.....................................................................................................\n      changed                   = dest isnt dpar\n      #.....................................................................................................\n      if @cascades and @cascades.has verb\n        for subfsm_name in @fsm_names\n          @[ subfsm_name ].tryto verb, P...\n      #.....................................................................................................\n      # for aname, actions of @before\n      #   continue unless ( aname is 'any' ) or ( aname is XXXX )\n      #   for action in actions\n      #     XXXXX\n      debug '^333344^', { verb, dpar, dest, changed, }\n      debug '^333344^', @[ verb ]\n      debug '^333344^', @[ verb ]?.before\n      # @before.any?              P...\n      # @before.change?           P... if changed\n      call_handlers = ( handlers, P... ) =>\n        return null unless handlers?\n        handler.apply @, P for handler in handlers\n        return null\n      call_handlers @[ verb ]?.before, P...\n      # #.....................................................................................................\n      # @leave.any?               P... if changed\n      # @leave[ dpar ]?           P... if changed\n      # #.....................................................................................................\n      # @lstate = dest if changed\n      # #.....................................................................................................\n      # @stay.any?                P... if not changed\n      # @stay[ dest ]?            P... if not changed\n      # @enter.any?               P... if changed\n      # @enter[ dest ]?           P... if changed\n      # #.....................................................................................................\n      # @after[ verb ]?           P...\n      # @after.change?            P... if changed\n      # @after.any?               P...\n      #.....................................................................................................\n      ### NOTE At this point, the transition has finished, so we reset the `@_nxt_*` attributes: ###\n      @_nxt_verb                = null\n      @_nxt_dest                = null\n      @_nxt_dpar                = null\n      #.....................................................................................................\n      return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_handlers: ->\n  #   ### TAINT add handlers for trigger, change ###\n  #   ### TAINT check names against reserved ###\n  #   try\n  #     for category in [ 'before', 'enter', 'stay', 'leave', 'after', ]\n  #       @_tmp.known_names.add category\n  #       for name, handler of @_tmp.fsmd[ category ] ? {}\n  #         @[ category ][ name ] = handler.bind @\n  #   catch error\n  #     error.message += \" — Error occurred during @_compile_handlers with #{rpr { category, name, handler, }}\"\n  #     throw error\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_goto: ->\n  #   @_tmp.known_names.add 'goto'\n  #   if ( goto = @_tmp.fsmd.goto )?\n  #     unless goto is '*'\n  #       throw new Error \"^intermatic/_compile_handlers@776^ expected '*' for key `goto`, got #{rpr goto}\"\n  #     transitioner  = @_get_transitioner 'goto', null\n  #     goto          = ( dest, P... ) => transitioner dest, P...\n  #     for dest in @lstates\n  #       do ( dest ) =>\n  #         goto[ dest ] = ( P... ) => transitioner dest, P...\n  #     set @, 'goto', goto\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_can: ->\n  #   @_tmp.known_names.add 'can'\n  #   can = ( verb ) =>\n  #     unless ( trigger = @triggers[ verb ] )?\n  #       throw new Error \"^intermatic/can@822^ unknown trigger #{rpr verb}\"\n  #     return trigger[ @lstate ]?\n  #   for verb of @triggers\n  #     do ( verb ) =>\n  #       can[ verb ] = ( P... ) => can verb, P...\n  #   set @, 'can', can\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_tryto: ->\n  #   @_tmp.known_names.add 'tryto'\n  #   tryto = ( verb, P... ) =>\n  #     return false unless @can verb\n  #     ### TAINT we will possibly want to return some kind of result from trigger ###\n  #     @[ verb ] P...\n  #     return true\n  #   for verb of @triggers\n  #     do ( verb ) =>\n  #       tryto[ verb ] = ( P... ) => tryto verb, P...\n  #   set @, 'tryto', tryto\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_subfsms: ->\n  #   @_tmp.known_names.add 'fsms'\n  #   fsm_names = []\n  #   for sub_fname, sub_fsmd of @_tmp.fsmd.fsms ? {}\n  #     sub_fsmd  = { sub_fsmd..., }\n  #     if sub_fsmd.name? and sub_fsmd.name isnt sub_fname\n  #       throw new Error \"^intermatic/_compile_subfsms@506^ name mismatch, got #{rpr sub_fname}, #{rpr sub_fsmd.name}\"\n  #     sub_fsmd.name = sub_fname\n  #     set sub_fsmd, 'up', @\n  #     @_tmp.known_names.add sub_fname\n  #     fsm_names.push   sub_fname\n  #     set @, sub_fname, new @constructor sub_fsmd\n  #   @fsm_names    = freeze fsm_names\n  #   @has_subfsms  = fsm_names.length > 0\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_data: ->\n  #   @_tmp.known_names.add 'data'\n  #   return null unless ( data = @_tmp.fsmd.data )?\n  #   @data = {}\n  #   for pname, propd of Object.getOwnPropertyDescriptors @_tmp.fsmd.data\n  #     Object.defineProperty @data, pname, propd\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_cascades: ->\n  #   @_tmp.known_names.add 'cascades'\n  #   return null unless ( cascades = @_tmp.fsmd.cascades )?\n  #   @cascades = new Set cascades\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _copy_other_attributes: ->\n  #   for pname, propd of Object.getOwnPropertyDescriptors @_tmp.fsmd\n  #     continue if @_tmp.known_names.has pname\n  #     Object.defineProperty @, pname, propd\n  #   return null\n\n\n############################################################################################################\nmodule.exports = Intermatic\n# if globalThis.require? then module.exports        = { Intermatic, }\n# else                        globalThis.Intermatic = Intermatic\n\n\n\n"
  ]
}