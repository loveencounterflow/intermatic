{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\ntypes                     = new ( require 'intertype' ).Intertype()\n{ validate\n  isa\n  declare }               = types.export()\nfreeze                    = Object.freeze\nmisfit                    = Symbol 'misfit'\nunless globalThis.debug?  then debug  = console.debug\nunless globalThis.rpr?    then rpr    = JSON.stringify\n\n#===========================================================================================================\n# TYPES\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'trajectory', tests:\n  \"x isa list of texts\":      ( x ) -> @isa.list_of 'text', x\n  \"length is 0 or > 1\":       ( x ) -> ( x.length is 0 ) or ( x.length > 1 )\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'start_trajectory', tests:\n  \"x is either a trajectory or a lstate\": ( x ) -> ( @isa.trajectory x ) or ( @isa.lstate x )\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'verb', tests:\n  \"x isa nonempty_text\":      ( x ) -> @isa.nonempty_text x\n  # \"x is not a reserved word\": ( x ) ->\n  # \"x is not an lstate\": ( x ) ->\n  # or test against catalog of known verbs\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'lstate', tests:\n  \"x isa nonempty_text\":      ( x ) -> @isa.nonempty_text x\n  # \"x is not a reserved word\": ( x ) ->\n  # \"x is not an verb\": ( x ) ->\n  # or test against catalog of known verbs\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'goto_target', tests:\n  \"x is 'any'\": ( x ) -> x is 'any'\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'actions', tests:\n  ### TAINT allow async functions ###\n  \"x isa list of functions\":      ( x ) -> @isa.list_of 'function', x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'fsmd_multitrajectory', ( x ) ->\n  return false unless @isa.list x\n  return false unless @isa.list x[ 0 ]\n  return @isa.list_of 'trajectory', x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'fsmd_moves', tests:\n  \"x is an object\":               ( x ) -> @isa.object x\n  \"keys of x are verbs\":          ( x ) -> ( Object.keys x ).every ( k ) => @isa.verb k\n  \"values of x are trajectories (or start_trajectories) or a list of those\": ( x ) ->\n    for k, v of x\n      if k is 'start'\n        return false unless @isa.start_trajectory v\n        continue\n      ### NOTE this allows lists of trajectories for verbs other than 'start' only ###\n      return false unless ( @isa.trajectory v ) or ( @isa.fsmd_multitrajectory v )\n    return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nset = ( target, key, value ) ->\n  if target[ key ] isnt undefined\n    throw new Error \"^intermatic/set@776^ name collision: #{rpr key}\"\n  target[ key ] = value\n  return value\n\n#-----------------------------------------------------------------------------------------------------------\npush_circular = ( xs, x, max_length = 1 ) ->\n  R = [ xs..., x, ]\n  R.shift() while R.length > max_length\n  return freeze R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intermatic\n\n  #---------------------------------------------------------------------------------------------------------\n  @_tid: 0\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( fsmd ) ->\n    # validate.fsmd fsmd\n    # @_types               = types\n    @_tmp                 = {}\n    @_tmp.fsmd            = { fsmd..., }\n    @_tmp.known_names     = new Set()\n    # @_mnames              = new Set()\n    @moves                = null\n    @cascades             = null\n    @lstates              = null\n    @fsm_names            = []\n    @has_subfsms          = false\n    @_stage               = null\n    @_lstate              = 'void'\n    @_root_fsm            = misfit\n    @_reserved_keys       = new Set()\n    @_trigger_stages      = freeze [ 'before', 'after', ]\n    @_state_stages        = freeze [ 'entering', 'leaving', 'keeping', ]\n    do =>\n      for stages in [ @_trigger_stages, @_state_stages, ]\n        set @, stage, {} for stage in stages\n    @data                 = null\n    @history_length       = 1\n    @_cancelled           = null\n    @_prv_lstates         = [ @_lstate, ]\n    @_prv_verbs           = []\n    @_nxt_dpar            = null\n    @_nxt_dest            = null\n    @_nxt_verb            = null\n    @_path                = null\n    ### TAINT use read-only properties: ###\n    @_inherit_names       = new Set [ 'omit_name_from_path', 'path_separator', ]\n    @_inherited           =\n      omit_name_from_path:  fsmd.omit_name_from_path  ? misfit\n      path_separator:       fsmd.path_separator       ? misfit\n    @path_separator       = '/'\n    @omit_name_from_path  = false\n    @up                   = null\n    #.......................................................................................................\n    do =>\n      ### TAINT should definitely simplify logic, maybe use FSM as protoype for sub-FSM? ###\n      for k of @\n        continue if @_inherit_names.has k\n        @_reserved_keys.add k\n      return null\n    #.......................................................................................................\n    @_compile_fail()\n    # @_compile_cyclers()\n    @_compile_moves()\n    @_compile_triggers()\n    @_compile_actions()\n    # @_compile_handlers()\n    @_compile_goto()\n    @_compile_can()\n    @_compile_tryto()\n    @_compile_subfsms()\n    # @_compile_data()\n    @_compile_cascades()\n    # @_compile_root_fsms()\n    @_copy_other_attributes()\n    @_copy_inherited_attributes()\n    delete @_tmp\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Object.defineProperties @prototype,\n    #-------------------------------------------------------------------------------------------------------\n    lstate:\n      enumerable:     true\n      get:            -> @_lstate\n      set: ( lstate ) ->\n        validate.lstate lstate\n        @_prv_lstates = push_circular @_prv_lstates, lstate, @history_length + 1\n        @_lstate      = lstate\n    #-------------------------------------------------------------------------------------------------------\n    cstate:\n      enumerable:     true\n      get: ->\n        R                 = Object.assign {}, @move\n        R.path            = x if ( x = @path )?\n        R.data            = freeze { x..., } if ( x = @data )?\n        R[ subfsm_name ]  = @[ subfsm_name ].cstate for subfsm_name in @fsm_names\n        return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    EXP_dstate:\n      enumerable:     true\n      get: ->\n        target        = { lstate: @lstate, }\n        R             = { [@name]: target, }\n        target.data   = @data if @data?\n        for subfsm_name in @fsm_names\n          sub_fsm = @[ subfsm_name ]\n          Object.assign target, sub_fsm.EXP_dstate\n        freeze target\n        return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    stage:    get: -> @_stage\n    verb:     get: -> @_nxt_verb\n    dpar:     get: -> @_nxt_dpar\n    dest:     get: -> @_nxt_dest\n    #-------------------------------------------------------------------------------------------------------\n    move: get: ->\n      R         = {}\n      R.stage   = x if ( x = @stage   )?\n      R.verb    = x if ( x = @verb    )?\n      R.dpar    = x if ( x = @dpar    )?\n      R.dest    = x if ( x = @dest    )?\n      R.changed = x if ( x = @changed )? and x\n      R.lstate  = @lstate\n      R.failed  = true if ( @dpar? and not @dest? )\n      return freeze R\n    #-------------------------------------------------------------------------------------------------------\n    fsms: get: -> [ @_walk_fsms()..., ]\n    #-------------------------------------------------------------------------------------------------------\n    changed:\n      get: ->\n        return null unless @_nxt_dpar? and @_nxt_dest?\n        return @_nxt_dpar isnt @_nxt_dest\n    #-------------------------------------------------------------------------------------------------------\n    path:\n      get: ->\n        return R                                                if ( R = @_path )?\n        return @_path = @name ? 'FSM'                           if not @up?\n        return @_path = @name                                   if ( not @up.up? ) and @omit_name_from_path\n        return @_path = \"#{@up.path}#{@path_separator}#{@name}\"\n    #-------------------------------------------------------------------------------------------------------\n    root_fsm:\n      get: ->\n        return R if ( R = @_root_fsm ) isnt misfit\n        return @_root_fsm = null if @up is null\n        return @_root_fsm = if ( root_fsm = @up.root_fsm )? then root_fsm else @up\n    #-------------------------------------------------------------------------------------------------------\n    history:\n      get: ->\n        R = []\n        for verb, idx in @_prv_verbs\n          dpar  = @_prv_lstates[ idx ]\n          dest  = @_prv_lstates[ idx + 1 ]\n          R.push freeze { verb, dpar, dest, }\n        return freeze R\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ->\n    throw new Error \"^intermatic/fail@557^ trigger not allowed: #{rpr { name: @name, verb: @verb, dpar: @dpar, }}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fail: ->\n    @_tmp.known_names.add 'fail'\n    return null unless ( fail = @_tmp.fsmd.fail )?\n    @fail = fail.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_moves: ->\n    @_tmp.known_names.add 'moves'\n    # starred       = {}\n    lstates       = new Set [ 'void', ]\n    fsmd_moves    = @_tmp.fsmd.moves ? {}\n    validate.fsmd_moves fsmd_moves\n    fsmd_moves    = @_tmp.fsmd.moves = { fsmd_moves..., }\n    @moves        = {}\n    verbs         = ( verb for verb of fsmd_moves )\n    #.......................................................................................................\n    for verb, trajectory of fsmd_moves\n      ### If the verb is `start`, then value may be just the name of the start verb instead of a list ###\n      validate.verb verb\n      if ( verb is 'start' ) and ( not isa.list trajectory )\n        trajectory = [ 'void', trajectory, ]\n      continue unless trajectory.length > 0\n      #.....................................................................................................\n      if isa.fsmd_multitrajectory trajectory\n        @_compile_monotrajectory lstates, verb, monotrajectory for monotrajectory in trajectory\n      else\n        @_compile_monotrajectory lstates, verb, trajectory\n    #.......................................................................................................\n    @lstates = freeze [ lstates..., ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_monotrajectory: ( lstates, verb, trajectory ) ->\n    for tidx in [ 0 ... trajectory.length - 1 ]\n      ### TAINT validate that free of collision ###\n      dpar  = trajectory[ tidx ]\n      dest  = trajectory[ tidx + 1 ]\n      #...................................................................................................\n      lstates.add dpar\n      lstates.add dest\n      set ( @moves[ verb ] ?= {} ), dpar, dest\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_triggers: ->\n    for verb, dests_by_deps of @moves\n      do ( verb, dests_by_deps ) =>\n        trigger = @_get_trigger verb, dests_by_deps\n        set @, verb, trigger\n        @_tmp.known_names.add verb\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_actions: ->\n    #.......................................................................................................\n    for stage in @_trigger_stages\n      @_tmp.known_names.add stage\n      continue unless ( source = @_tmp.fsmd[ stage ] )?\n      target = @[ stage ]\n      for verb, actions of source\n        ### TAINT validate.verb verb; esp validate not an lstate ###\n        validate.verb verb\n        actions = [ actions, ] unless isa.list actions\n        validate.actions actions\n        set target, verb, actions\n    #.......................................................................................................\n    for stage in @_state_stages\n      @_tmp.known_names.add stage\n      continue unless ( source = @_tmp.fsmd[ stage ] )?\n      target = @[ stage ]\n      for lstate, actions of source\n        ### TAINT validate.lstate lstate; esp validate not a verb ###\n        validate.lstate lstate\n        actions = [ actions, ] unless isa.list actions\n        validate.actions actions\n        set target, lstate, actions\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _call_actions: ( target, stage, verb_or_lstate, P... ) ->\n    return null unless target?\n    return null unless ( transitioners = target[ stage ]?[ verb_or_lstate ] )?\n    target._stage = stage\n    transitioner.apply target, P for transitioner in transitioners\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_trigger: ( verb, dests_by_deps = null ) ->\n    ### TAINT too much logic to be done at in run time, try to precompile more ###\n    return transitioner = ( P... ) =>\n      ### TAINT use single transitioner method for all triggers? ###\n      @_nxt_verb      = verb\n      ### TAINT consider to do this inside a property setter, as for `@lstate`: ###\n      @_prv_verbs     = push_circular @_prv_verbs, verb, @history_length\n      @_nxt_dpar      = dpar = @lstate\n      #-------------------------------------------------------------------------------------------------\n      if dests_by_deps? then    dest          = ( dests_by_deps[ dpar ] ? dests_by_deps.any ? null )\n      else                    [ dest, P..., ] = P\n      return @fail P... unless dest?\n      #.....................................................................................................\n      @_nxt_dest  = dest\n      changed     = dest isnt dpar\n      @_cancelled = false\n      #.....................................................................................................\n      if @cascades and @cascades.has verb\n        for subfsm_name in @fsm_names\n          @[ subfsm_name ].tryto verb, P...\n      #.....................................................................................................\n      loop\n        # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n        @_call_actions @,         'before',    'any',             P...;                  break if @_cancelled\n        @_call_actions @,         'before',    'change',          P... if      changed;  break if @_cancelled\n        @_call_actions @,         'before',    verb,              P...;                  break if @_cancelled\n        # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n        @_call_actions @,         'leaving',   'any',             P... if      changed;  break if @_cancelled\n        @_call_actions @,         'leaving',   dpar,              P... if      changed;  break if @_cancelled\n        #...................................................................................................\n        @lstate = dest if changed\n        #...................................................................................................\n        @_call_actions @,         'keeping',   'any',             P... if  not changed;  break if @_cancelled\n        @_call_actions @,         'keeping',   dpar,              P... if  not changed;  break if @_cancelled\n        # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n        @_call_actions @,         'entering',  'any',             P... if      changed;  break if @_cancelled\n        @_call_actions @,         'entering',  dest,              P... if      changed;  break if @_cancelled\n        # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n        @_call_actions @,         'after',     'any',             P...;                  break if @_cancelled\n        @_call_actions @,         'after',     'change',          P... if      changed;  break if @_cancelled\n        @_call_actions @,         'after',     verb,              P...;                  break if @_cancelled\n        @_call_actions @root_fsm, 'after',     'EXP_any_change',  @, P... if      changed;  break if @_cancelled\n        # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n        break\n      #.....................................................................................................\n      if @_cancelled\n        debug '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CANCELLED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'\n        ### TAINT not yet implemented ###\n        ### TAINT should be done in a method ###\n        ### TAINT alternatively consider to change values in temp object, only push to history when succesfull ###\n        # @_prv_lstates.pop()\n        # @_prv_verbs.pop()\n        # @_lstate = @_nxt_dpar\n        # debug @cstate\n      #.....................................................................................................\n      ### NOTE At this point, the transition has finished, so we reset the `@_nxt_*` attributes: ###\n      @_cancelled = null\n      @_stage     = null\n      @_nxt_verb  = null\n      @_nxt_dest  = null\n      @_nxt_dpar  = null\n      #.....................................................................................................\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  cancel: ->\n    throw new Error \"^intermatic/cancel@886^ can only cancel during move\" unless @_stage?\n    @_cancelled = true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_goto: ->\n    @_tmp.known_names.add 'goto'\n    if ( goto = @_tmp.fsmd.goto )?\n      validate.goto_target goto\n      transitioner  = @_get_trigger 'goto', null\n      goto          = ( dest, P... ) => transitioner dest, P...\n      for dest in @lstates\n        do ( dest ) =>\n          goto[ dest ] = ( P... ) => transitioner dest, P...\n      set @, 'goto', goto\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_can: ->\n    @_tmp.known_names.add 'can'\n    #.......................................................................................................\n    can = ( verb ) =>\n      unless ( transitions = @moves[ verb ] )?\n        throw new Error \"^intermatic/can@822^ unknown verb #{rpr verb}\"\n      return transitions[ @lstate ]?\n    #.......................................................................................................\n    can_proxy = new Proxy can,\n      get: ( target, key ) -> ( -> target key )\n    #.......................................................................................................\n    set @, 'can', can_proxy\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_tryto: ->\n    @_tmp.known_names.add 'tryto'\n    tryto = ( verb, P... ) =>\n      return false unless @can verb\n      @[ verb ] P...\n      return true\n    #.......................................................................................................\n    tryto_proxy = new Proxy tryto,\n      get: ( target, key ) -> ( ( P... ) -> target key, P... )\n    #.......................................................................................................\n    set @, 'tryto', tryto_proxy\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_subfsms: ->\n    fsm_names = []\n    for subfsm_name, sub_fsmd of @_tmp.fsmd ? {}\n      continue if @_tmp.known_names.has subfsm_name\n      continue if @_reserved_keys.has subfsm_name\n      continue unless isa.object sub_fsmd\n      @_tmp.known_names.add subfsm_name\n      sub_fsmd  = { sub_fsmd..., }\n      if sub_fsmd.name? and sub_fsmd.name isnt subfsm_name\n        throw new Error \"^intermatic/_compile_subfsms@506^ name mismatch, got #{rpr subfsm_name}, #{rpr sub_fsmd.name}\"\n      sub_fsmd.name = subfsm_name\n      set sub_fsmd, 'up', @\n      @_tmp.known_names.add subfsm_name\n      fsm_names.push   subfsm_name\n      set @, subfsm_name, new @constructor sub_fsmd\n    @fsm_names    = freeze fsm_names\n    @has_subfsms  = fsm_names.length > 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_cascades: ->\n    @_tmp.known_names.add 'cascades'\n    return null unless ( cascades = @_tmp.fsmd.cascades )?\n    @cascades = new Set cascades\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _compile_root_fsms: ->\n  #   @_tmp.known_names.add 'root_fsm'\n  #   debug '^3344^', @up?.name ? 'NULL'\n  #   return unless ( @_root_fsm = @up )?\n  #   @_root_fsm = root_fsm while ( root_fsm = root_fsm.up )?\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _copy_other_attributes: ->\n    for pname, propd of Object.getOwnPropertyDescriptors @_tmp.fsmd\n      continue if @_tmp.known_names.has pname\n      @_tmp.known_names.add pname\n      # if ( pname is 'data' ) and ( isa.object propd.value ) and ( not propd.value.up? )\n      #   Object.defineProperty propd.value, 'fsm', { enumerable: false, value: @, }\n      Object.defineProperty @, pname, propd\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_fsms: ( transitive = false ) ->\n    for fsm_name in @fsm_names\n      fsm = @[ fsm_name ]\n      yield fsm\n      yield from fsm._walk_fsms transitive if transitive\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _copy_inherited_attributes: ->\n    return unless @up is null ### only run for root fsm ###\n    for fsm from @_walk_fsms true\n      for pname from @_inherit_names\n        continue if fsm._inherited[ pname ] isnt misfit\n        fsm[ pname ] = @[ pname ]\n    return null\n\n\n############################################################################################################\nmodule.exports = Intermatic\n# if globalThis.require? then module.exports        = { Intermatic, }\n# else                        globalThis.Intermatic = Intermatic\n\n\n\n"
  ]
}