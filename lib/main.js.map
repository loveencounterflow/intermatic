{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n# ############################################################################################################\n# CND                       = require 'cnd'\n# rpr                       = CND.rpr\n# badge                     = 'MKTS-GUI-TOOLBOX-FSM'\n# debug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# info                      = CND.get_logger 'info',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# help                      = CND.get_logger 'help',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# echo                      = CND.echo.bind CND\n# #...........................................................................................................\n# types                     = new ( require 'intertype' ).Intertype()\n# { isa\n#   validate\n#   declare\n#   type_of }               = types.export()\n# { freeze\n#   lets }                  = require 'letsfreezethat'\nfreeze                    = Object.freeze\n# if globalThis.require?\n#   StateMachine              = require 'javascript-state-machine'\n# Mutimix                   = require 'multimix'\n\n# #-----------------------------------------------------------------------------------------------------------\n# warn = ( message ) ->\n#   if µ?.DOM?.warn?        then µ.DOM.warn message\n#   else if console?.warn?  then console.warn message\n#   else throw new Error message\n#   return null\n\n# #===========================================================================================================\n# class Fsm extends Multimix\n#   constructor: ( fsmd ) ->\n#     # validate.fsmd fsmd\n\n# #===========================================================================================================\n# class Compund_fsm extends Multimix\n#   constructor: ( fsmds ) ->\n#     # validate.fsmds fsmds\n\nunless globalThis.debug?  then debug  = console.debug\nunless globalThis.rpr?    then rpr    = JSON.stringify\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nset = ( target, key, value ) ->\n  if target[ key ]?\n    throw new Error \"^interstate/set@776^ name collision: #{rpr key}\"\n  target[ key ] = value\n  return value\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intermatic\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( fsmd ) ->\n    # validate.fsmd fsmd\n    @reserved     = freeze [ 'void', 'start', 'stop', 'goto', 'change', 'fail', ]\n    @fsmd         = freeze fsmd\n    @triggers     = {}\n    @_state       = 'void'\n    # @states       = {}\n    @before       = {}\n    @enter        = {}\n    @stay         = {}\n    @leave        = {}\n    @after        = {}\n    @my           = {}\n    @our          = null\n    @_compile_triggers()\n    @_compile_transitioners()\n    @_compile_handlers()\n    @_compile_goto()\n\n  #---------------------------------------------------------------------------------------------------------\n  Object.defineProperties @prototype,\n    state:\n      get:            -> @_state\n      set: ( sname  ) ->\n        if typeof sname isnt 'string'\n          throw new Error \"^interstate/set/state@501^ state name must be text, got #{rpr sname}\"\n        @_state = sname\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ( trigger ) ->\n    throw new Error \"^interstate/fail@556^ trigger not allowed: #{rpr trigger}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_triggers: ->\n    has_start     = false\n    @starts_with  = null\n    starred       = {}\n    snames        = new Set [ 'void', ]\n    triggers      = [ ( @fsmd.triggers ? [] )..., ]\n    tnames        = new Set ( t[ 1 ] for t in triggers )\n    #.......................................................................................................\n    unless tnames.has 'start'\n      first_sname = triggers[ 0 ]?[ 2 ] ? 'void'\n      triggers.unshift [ 'void', 'start', first_sname, ]\n    #.......................................................................................................\n    for triplet in triggers\n      ### TAINT validate.list_of.list triplet ###\n      ### TAINT validate.tname tname ###\n      ### TAINT validate that free of collision ###\n      [ from_sname, tname, to_sname, ] = triplet\n      #.....................................................................................................\n      ### TAINT also validate that tuples [ from_sname, tname, ] unique ###\n      if tname is 'start'\n        throw new Error \"^interstate/fail@556^ duplica declaration of `start`: #{rpr triplet}\" if has_start\n        has_start     = true\n        @starts_with  = to_sname\n      #.....................................................................................................\n      ### Special-case starred triggers: ###\n      if from_sname is '*'\n        starred[ tname ] = to_sname\n        continue\n      #.....................................................................................................\n      snames.add from_sname\n      snames.add to_sname\n      set ( @triggers[ tname ] ?= {} ), from_sname, to_sname\n    #.......................................................................................................\n    for starred_name, to_sname of starred\n      for from_sname from snames\n        set ( @triggers[ starred_name ] ?= {} ), from_sname, to_sname\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transitioner: ( tname, from_and_to_states = null ) ->\n    ### TAINT too much logic to be done at in run time, try to precompile more ###\n    $key = '^trigger'\n    return transitioner = ( P... ) =>\n      ### TAINT use single transitioner method for all triggers? ###\n      from_sname  = @state\n      #-------------------------------------------------------------------------------------------------\n      if from_and_to_states?\n        unless ( to_sname = from_and_to_states[ @state ] )?\n          trigger = freeze { $key, failed: true, from: from_sname, via: tname, }\n          return @fsmd.fail trigger if @fsmd.fail?\n          return @fail trigger\n      else\n        [ to_sname, P..., ] = P\n      #-------------------------------------------------------------------------------------------------\n      changed     = to_sname isnt from_sname\n      trigger     = freeze { $key, from: from_sname, via: tname, to: to_sname, changed, }\n      ### TAINT add extra arguments P ###\n      @before.trigger?          trigger\n      @before.change?           trigger if changed\n      @before[  tname       ]?  trigger\n      @leave[   from_sname  ]?  trigger if changed\n      @state      = to_sname if changed\n      @stay[    to_sname    ]?  trigger if not changed\n      @enter[   to_sname    ]?  trigger if changed\n      @after[   tname       ]?  trigger\n      @after.change?            trigger if changed\n      @after.trigger?           trigger\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_transitioners: ->\n    for tname, from_and_to_states of @triggers\n      do ( tname, from_and_to_states ) =>\n        ### NOTE we *could* allow custom transitioners but that would only replicate behavior available\n        via `fsm.before[ tname ]()`, `fsm.after[ tname ]()`:\n        transitioner = @fsmd[ tname ] ? @_get_transitioner tname, from_and_to_states ###\n        transitioner = @_get_transitioner tname, from_and_to_states\n        set @, tname, transitioner\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_handlers: ->\n    ### TAINT add handlers for trigger, change ###\n    ### TAINT check names against reserved ###\n    for category in [ 'before', 'enter', 'stay', 'leave', 'after', ]\n      for name, handler of @fsmd[ category ] ? {}\n        @[ category ][ name ] = handler.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_goto: ->\n    if ( goto = @fsmd.goto )?\n      unless goto is '*'\n        throw new Error \"^interstate/_compile_handlers@776^ expected '*' for key `goto`, got #{rpr goto}\"\n      transitioner = @_get_transitioner 'goto', null\n      set @, 'goto', ( to_sname ) =>\n        transitioner to_sname\n    return null\n\n\n\n############################################################################################################\nmodule.exports = Intermatic\n# if globalThis.require? then module.exports        = { Intermatic, }\n# else                        globalThis.Intermatic = Intermatic\n\n\n\n"
  ]
}