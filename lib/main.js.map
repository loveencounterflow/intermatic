{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n# ############################################################################################################\n# CND                       = require 'cnd'\n# rpr                       = CND.rpr\n# badge                     = 'MKTS-GUI-TOOLBOX-FSM'\n# debug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# info                      = CND.get_logger 'info',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# help                      = CND.get_logger 'help',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# echo                      = CND.echo.bind CND\n# #...........................................................................................................\n# types                     = new ( require 'intertype' ).Intertype()\n# { isa\n#   validate\n#   declare\n#   type_of }               = types.export()\n# { freeze\n#   lets }                  = require 'letsfreezethat'\nfreeze                    = Object.freeze\n# if globalThis.require?\n#   StateMachine              = require 'javascript-state-machine'\n# Mutimix                   = require 'multimix'\n\n# #-----------------------------------------------------------------------------------------------------------\n# warn = ( message ) ->\n#   if µ?.DOM?.warn?        then µ.DOM.warn message\n#   else if console?.warn?  then console.warn message\n#   else throw new Error message\n#   return null\n\n# #===========================================================================================================\n# class Fsm extends Multimix\n#   constructor: ( fsmd ) ->\n#     # validate.fsmd fsmd\n\n# #===========================================================================================================\n# class Compund_fsm extends Multimix\n#   constructor: ( fsmds ) ->\n#     # validate.fsmds fsmds\n\nunless globalThis.debug?  then debug  = console.debug\nunless globalThis.rpr?    then rpr    = JSON.stringify\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nset = ( target, key, value ) ->\n  if target[ key ]?\n    throw new Error \"^interstate/set@776^ name collision: #{rpr key}\"\n  target[ key ] = value\n  return value\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intermatic\n\n  #---------------------------------------------------------------------------------------------------------\n  @_tid: 0\n\n  #---------------------------------------------------------------------------------------------------------\n  # constructor: ( fname, fsmd ) ->\n  constructor: ( fsmd ) ->\n\n    # validate.fsmd fsmd\n    @_covered_names = new Set()\n    @reserved       = freeze [ 'void', 'start', 'stop', 'goto', 'change', 'fail', ]\n    @fsmd           = { fsmd..., }\n    @triggers       = {}\n    @subfsm_names   = []\n    @has_subfsms    = false\n    @_lstate        = 'void'\n    # @states         = {}\n    @before         = {}\n    @enter          = {}\n    @stay           = {}\n    @leave          = {}\n    @after          = {}\n    @up             = null\n    @_compile_cyclers()\n    @_compile_triggers()\n    @_compile_transitioners()\n    @_compile_handlers()\n    @_compile_goto()\n    @_compile_subfsms()\n    @_copy_other_attributes()\n    delete @_covered_names\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Object.defineProperties @prototype,\n    #-------------------------------------------------------------------------------------------------------\n    lstate:\n      get:            -> @_lstate\n      set: ( lstate ) ->\n        if typeof lstate isnt 'string'\n          throw new Error \"^interstate/set/lstate@501^ lstate name must be text, got #{rpr lstate}\"\n        @_lstate = lstate\n    #-------------------------------------------------------------------------------------------------------\n    cstate:\n      get: ->\n        return @lstate unless @has_subfsms\n        R = { _: @lstate, }\n        R[ subfsm_name ] = @[ subfsm_name ].cstate for subfsm_name in @subfsm_names\n        return freeze R\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ( trigger ) ->\n    throw new Error \"^interstate/fail@556^ trigger not allowed: #{rpr trigger}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_cyclers: ->\n    triggers = @fsmd.triggers = [ ( @fsmd.triggers ? [] )..., ]\n    return null unless ( cyclers = @fsmd.cyclers )?\n    #.......................................................................................................\n    for tname, lstates of cyclers\n      debug '^33398^', lstates\n      for cur_lstate, cur_idx in lstates\n        nxt_idx     = ( cur_idx + 1 ) %% lstates.length\n        nxt_lstate  = lstates[ nxt_idx ]\n        triggers.push [ cur_lstate, tname, nxt_lstate, ]\n    #.......................................................................................................\n    freeze @fsmd\n    debug '^222233^', @fsmd\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_triggers: ->\n    has_start     = false\n    @starts_with  = null\n    starred       = {}\n    lstates       = new Set [ 'void', ]\n    triggers      = @fsmd.triggers ### already a copy at this point, see @_compile_cyclers ###\n    tnames        = new Set ( t[ 1 ] for t in triggers )\n    #.......................................................................................................\n    unless tnames.has 'start'\n      first_lstate = triggers[ 0 ]?[ 2 ] ? 'void'\n      triggers.unshift [ 'void', 'start', first_lstate, ]\n    #.......................................................................................................\n    for triplet in triggers\n      ### TAINT validate.list_of.list triplet ###\n      ### TAINT validate.tname tname ###\n      ### TAINT validate that free of collision ###\n      [ from_lstate, tname, to_lstate, ] = triplet\n      #.....................................................................................................\n      ### TAINT also validate that tuples [ from_lstate, tname, ] unique ###\n      if tname is 'start'\n        throw new Error \"^interstate/fail@556^ duplica declaration of `start`: #{rpr triplet}\" if has_start\n        has_start     = true\n        @starts_with  = to_lstate\n      #.....................................................................................................\n      ### Special-case starred triggers: ###\n      if from_lstate is '*'\n        starred[ tname ] = to_lstate\n        continue\n      #.....................................................................................................\n      lstates.add from_lstate\n      lstates.add to_lstate\n      set ( @triggers[ tname ] ?= {} ), from_lstate, to_lstate\n    #.......................................................................................................\n    for starred_name, to_lstate of starred\n      for from_lstate from lstates\n        set ( @triggers[ starred_name ] ?= {} ), from_lstate, to_lstate\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_tid: -> tid = ++@constructor._tid; return \"t#{tid}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transitioner: ( tname, from_and_to_lstates = null ) ->\n    ### TAINT too much logic to be done at in run time, try to precompile more ###\n    $key = '^trigger'\n    return transitioner = ( P... ) =>\n      ### TAINT use single transitioner method for all triggers? ###\n      from_lstate = @lstate\n      id          = @_new_tid()\n      #-------------------------------------------------------------------------------------------------\n      if from_and_to_lstates?\n        unless ( to_lstate = from_and_to_lstates[ @lstate ] )?\n          trigger = freeze { $key, id, failed: true, from: from_lstate, via: tname, }\n          return @fsmd.fail trigger if @fsmd.fail?\n          return @fail trigger\n      else\n        [ to_lstate, P..., ] = P\n      #-------------------------------------------------------------------------------------------------\n      changed     = to_lstate isnt from_lstate\n      trigger     = freeze { $key, id, from: from_lstate, via: tname, to: to_lstate, changed, }\n      ### TAINT add extra arguments P ###\n      @before.trigger?          trigger\n      @before.change?           trigger if changed\n      @before[ tname        ]?  trigger\n      @leave[  from_lstate  ]?  trigger if changed\n      @lstate     = to_lstate if changed\n      @stay[   to_lstate    ]?  trigger if not changed\n      @enter[  to_lstate    ]?  trigger if changed\n      @after[  tname        ]?  trigger\n      @after.change?            trigger if changed\n      @after.trigger?           trigger\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_transitioners: ->\n    @_covered_names.add 'triggers'\n    for tname, from_and_to_lstates of @triggers\n      do ( tname, from_and_to_lstates ) =>\n        ### NOTE we *could* allow custom transitioners but that would only replicate behavior available\n        via `fsm.before[ tname ]()`, `fsm.after[ tname ]()`:\n        transitioner = @fsmd[ tname ] ? @_get_transitioner tname, from_and_to_lstates ###\n        transitioner = @_get_transitioner tname, from_and_to_lstates\n        set @, tname, transitioner\n        @_covered_names.add tname\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_handlers: ->\n    ### TAINT add handlers for trigger, change ###\n    ### TAINT check names against reserved ###\n    for category in [ 'before', 'enter', 'stay', 'leave', 'after', ]\n      @_covered_names.add category\n      for name, handler of @fsmd[ category ] ? {}\n        @[ category ][ name ] = handler.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_goto: ->\n    @_covered_names.add 'goto'\n    if ( goto = @fsmd.goto )?\n      unless goto is '*'\n        throw new Error \"^interstate/_compile_handlers@776^ expected '*' for key `goto`, got #{rpr goto}\"\n      transitioner = @_get_transitioner 'goto', null\n      set @, 'goto', ( to_lstate ) =>\n        transitioner to_lstate\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_subfsms: ->\n    @_covered_names.add 'subs'\n    subfsm_names = []\n    for sub_fname, sub_fsmd of @fsmd.subs ? {}\n      sub_fsmd  = { sub_fsmd..., }\n      if sub_fsmd.name? and sub_fsmd.name isnt sub_fname\n        throw new Error \"^interstate/_compile_subfsms@506^ name mismatch, got #{rpr sub_fname}, #{rpr sub_fsmd.name}\"\n      sub_fsmd.name = sub_fname\n      set sub_fsmd, 'up', @\n      @_covered_names.add sub_fname\n      subfsm_names.push   sub_fname\n      set @, sub_fname, new @constructor sub_fsmd\n    @subfsm_names = freeze subfsm_names\n    @has_subfsms  = subfsm_names.length > 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _copy_other_attributes: ->\n    for pname, propd of Object.getOwnPropertyDescriptors @fsmd\n      continue if @_covered_names.has pname\n      Object.defineProperty @, pname, propd\n    return null\n\n\n############################################################################################################\nmodule.exports = Intermatic\n# if globalThis.require? then module.exports        = { Intermatic, }\n# else                        globalThis.Intermatic = Intermatic\n\n\n\n"
  ]
}