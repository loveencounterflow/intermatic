{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nfreeze                    = Object.freeze\nunless globalThis.debug?  then debug  = console.debug\nunless globalThis.rpr?    then rpr    = JSON.stringify\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nset = ( target, key, value ) ->\n  if target[ key ]?\n    throw new Error \"^interstate/set@776^ name collision: #{rpr key}\"\n  target[ key ] = value\n  return value\n\n#-----------------------------------------------------------------------------------------------------------\npush_circular = ( xs, x, max_length = 1 ) ->\n  R = [ xs..., x, ]\n  R.shift() while R.length > max_length\n  return freeze R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intermatic\n\n  #---------------------------------------------------------------------------------------------------------\n  @_tid: 0\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( fsmd ) ->\n    # validate.fsmd fsmd\n    @_tmp               = {}\n    @_tmp.fsmd          = { fsmd..., }\n    @_tmp.known_names   = new Set()\n    @triggers           = {}\n    @lstates            = null\n    @fsm_names          = []\n    @has_subfsms        = false\n    @_lstate            = 'void'\n    @before             = {}\n    @enter              = {}\n    @stay               = {}\n    @leave              = {}\n    @after              = {}\n    @data               = {}\n    @history_length     = 3\n    @_prv_lstates       = []\n    @_prv_verbs         = []\n    @_nxt_verb          = null\n    @_nxt_destination   = null\n    @up                 = null\n    @_path              = null\n    @_compile_fail()\n    @_compile_cyclers()\n    @_compile_triggers()\n    @_compile_transitioners()\n    @_compile_handlers()\n    @_compile_goto()\n    @_compile_can()\n    @_compile_tryto()\n    @_compile_subfsms()\n    @_compile_data()\n    @_copy_other_attributes()\n    delete @_tmp\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Object.defineProperties @prototype,\n    #-------------------------------------------------------------------------------------------------------\n    lstate:\n      get:            -> @_lstate\n      set: ( lstate ) ->\n        if typeof lstate isnt 'string'\n          throw new Error \"^interstate/set/lstate@501^ lstate name must be text, got #{rpr lstate}\"\n        @_prv_lstates = push_circular @_prv_lstates, lstate, @history_length\n        @_lstate      = lstate\n    #-------------------------------------------------------------------------------------------------------\n    cstate:\n      get: ->\n        R =\n          _prv_lstates: @_prv_lstates ### !!!!!!!!!!!!! ###\n          lstate:   @lstate\n          path:     @path\n          from:     @from\n          via:      @via\n          to:       @to\n          data:     @data\n        R[ subfsm_name ] = @[ subfsm_name ].cstate for subfsm_name in @fsm_names\n        return freeze R\n    # #-------------------------------------------------------------------------------------------------------\n    # from:\n    #   get: -> @_prv_lstates[ @_prv_lstates.length - 1 ] ? null\n    # #-------------------------------------------------------------------------------------------------------\n    # via:\n    #   get: -> @_prv_verbs[ @_prv_verbs.length - 1 ] ? null\n    #   set:  ( trigger ) -> @\n    # #-------------------------------------------------------------------------------------------------------\n    # to:\n    #   get: -> '???'\n    #-------------------------------------------------------------------------------------------------------\n    from:\n      get: -> @_prv_lstates[ @_prv_lstates.length - 1 ] ? null\n    #-------------------------------------------------------------------------------------------------------\n    via:\n      get: -> @_prv_verbs[ @_prv_verbs.length - 1 ] ? null\n    #-------------------------------------------------------------------------------------------------------\n    to:\n      get: -> '???'\n    #-------------------------------------------------------------------------------------------------------\n    fsms:\n      get: -> ( @[ subfsm_name ] for subfsm_name in @fsm_names )\n    #-------------------------------------------------------------------------------------------------------\n    path:\n      get: ->\n        return R if ( R = @_path )?\n        return @_path = if @up? then \"#{@up.path}/#{@name}\" else @name\n\n  #---------------------------------------------------------------------------------------------------------\n  fail: ( trigger ) ->\n    throw new Error \"^interstate/fail@556^ trigger not allowed: (#{rpr @name}) #{rpr trigger}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_fail: ->\n    @_tmp.known_names.add 'fail'\n    return null unless ( fail = @_tmp.fsmd.fail )?\n    @fail = fail.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_cyclers: ->\n    @_tmp.known_names.add 'cyclers'\n    triggers = @_tmp.fsmd.triggers = [ ( @_tmp.fsmd.triggers ? [] )..., ]\n    return null unless ( cyclers = @_tmp.fsmd.cyclers )?\n    #.......................................................................................................\n    for verb, lstates of cyclers\n      for cur_lstate, cur_idx in lstates\n        nxt_idx     = ( cur_idx + 1 ) %% lstates.length\n        nxt_lstate  = lstates[ nxt_idx ]\n        triggers.push [ cur_lstate, verb, nxt_lstate, ]\n    #.......................................................................................................\n    # freeze @_tmp.fsmd\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_triggers: ->\n    has_start     = false\n    @starts_with  = null\n    starred       = {}\n    lstates       = new Set [ 'void', ]\n    triggers      = @_tmp.fsmd.triggers ### already a copy at this point, see @_compile_cyclers ###\n    tnames        = new Set ( t[ 1 ] for t in triggers )\n    #.......................................................................................................\n    unless tnames.has 'start'\n      first_lstate = triggers[ 0 ]?[ 2 ] ? 'void'\n      triggers.unshift [ 'void', 'start', first_lstate, ]\n    #.......................................................................................................\n    for triplet in triggers\n      ### TAINT validate.list_of.list triplet ###\n      ### TAINT validate.verb verb ###\n      ### TAINT validate that free of collision ###\n      [ departure, verb, destination, ] = triplet\n      #.....................................................................................................\n      ### TAINT also validate that tuples [ departure, verb, ] unique ###\n      if verb is 'start'\n        throw new Error \"^interstate/fail@556^ duplica declaration of `start`: #{rpr triplet}\" if has_start\n        has_start     = true\n        @starts_with  = destination\n      #.....................................................................................................\n      ### Special-case starred triggers: ###\n      if departure is '*'\n        starred[ verb ] = destination\n        continue\n      #.....................................................................................................\n      lstates.add departure\n      lstates.add destination\n      set ( @triggers[ verb ] ?= {} ), departure, destination\n    #.......................................................................................................\n    for starred_name, destination of starred\n      for departure from lstates\n        set ( @triggers[ starred_name ] ?= {} ), departure, destination\n    #.......................................................................................................\n    @lstates = freeze [ lstates..., ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_tid: -> tid = ++@constructor._tid; return \"t#{tid}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transitioner: ( verb, destinations_by_departures = null ) ->\n    ### TAINT too much logic to be done at in run time, try to precompile more ###\n    return transitioner = ( P... ) =>\n      ### TAINT use single transitioner method for all triggers? ###\n      departure   = @lstate\n      id          = @_new_tid()\n      #-------------------------------------------------------------------------------------------------\n      if destinations_by_departures?\n        unless ( destination = destinations_by_departures[ departure ] )?\n          trigger = freeze { id, failed: true, from: departure, verb, }\n          return @fail trigger\n      else\n        [ destination, P..., ] = P\n      #-------------------------------------------------------------------------------------------------\n      changed         = destination isnt departure\n      trigger         = { id, from: departure, verb, to: destination, }\n      trigger.changed = true if changed\n      trigger         = freeze trigger\n      ### TAINT add extra arguments P ###\n      @before.any?              trigger\n      @before.change?           trigger if changed\n      @before[ verb        ]?  trigger\n      @leave.any?               trigger if changed\n      @leave[  departure  ]?  trigger if changed\n      @lstate = destination if changed\n      @stay.any?                trigger if not changed\n      @stay[   destination    ]?  trigger if not changed\n      @enter.any?               trigger if changed\n      @enter[  destination    ]?  trigger if changed\n      @after[  verb        ]?  trigger\n      @after.change?            trigger if changed\n      @after.any?               trigger\n      # if @up?.after.cchange?\n      #   debug '^3338398^', @up?.after.cchange, trigger\n      #   @up.after.cchange trigger\n      # @up?.after.cchange?       trigger if changed\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_transitioners: ->\n    @_tmp.known_names.add 'triggers'\n    for verb, destinations_by_departures of @triggers\n      do ( verb, destinations_by_departures ) =>\n        ### NOTE we *could* allow custom transitioners but that would only replicate behavior available\n        via `fsm.before[ verb ]()`, `fsm.after[ verb ]()`:\n        transitioner = @_tmp.fsmd[ verb ] ? @_get_transitioner verb, destinations_by_departures ###\n        transitioner = @_get_transitioner verb, destinations_by_departures\n        set @, verb, transitioner\n        @_tmp.known_names.add verb\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_handlers: ->\n    ### TAINT add handlers for trigger, change ###\n    ### TAINT check names against reserved ###\n    try\n      for category in [ 'before', 'enter', 'stay', 'leave', 'after', ]\n        @_tmp.known_names.add category\n        for name, handler of @_tmp.fsmd[ category ] ? {}\n          @[ category ][ name ] = handler.bind @\n    catch error\n      error.message += \" — Error occurred during @_compile_handlers with #{rpr { category, name, handler, }}\"\n      throw error\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_goto: ->\n    @_tmp.known_names.add 'goto'\n    if ( goto = @_tmp.fsmd.goto )?\n      unless goto is '*'\n        throw new Error \"^interstate/_compile_handlers@776^ expected '*' for key `goto`, got #{rpr goto}\"\n      transitioner = @_get_transitioner 'goto', null\n      goto = ( destination, P... ) => transitioner destination, P...\n      for destination in @lstates\n        goto[ destination ] = ( P... ) => transitioner destination, P...\n      set @, 'goto', goto\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_can: ->\n    @_tmp.known_names.add 'can'\n    can = ( verb ) =>\n      unless ( trigger = @triggers[ verb ] )?\n        throw new Error \"^interstate/can@822^ unknown trigger #{rpr verb}\"\n      return trigger[ @lstate ]?\n    for verb of @triggers\n      can[ verb ] = ( P... ) => can verb, P...\n    set @, 'can', can\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_tryto: ->\n    @_tmp.known_names.add 'tryto'\n    tryto = ( verb, P... ) =>\n      return false unless @can verb\n      ### TAINT we will possibly want to return some kind of result from trigger ###\n      @[ verb ] P...\n      return true\n    for verb of @triggers\n      tryto[ verb ] = ( P... ) => tryto verb, P...\n    set @, 'tryto', tryto\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_subfsms: ->\n    @_tmp.known_names.add 'fsms'\n    fsm_names = []\n    for sub_fname, sub_fsmd of @_tmp.fsmd.fsms ? {}\n      sub_fsmd  = { sub_fsmd..., }\n      if sub_fsmd.name? and sub_fsmd.name isnt sub_fname\n        throw new Error \"^interstate/_compile_subfsms@506^ name mismatch, got #{rpr sub_fname}, #{rpr sub_fsmd.name}\"\n      sub_fsmd.name = sub_fname\n      set sub_fsmd, 'up', @\n      @_tmp.known_names.add sub_fname\n      fsm_names.push   sub_fname\n      set @, sub_fname, new @constructor sub_fsmd\n    @fsm_names    = freeze fsm_names\n    @has_subfsms  = fsm_names.length > 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_data: ->\n    @_tmp.known_names.add 'data'\n    return null unless ( data = @_tmp.fsmd.data )?\n    for pname, propd of Object.getOwnPropertyDescriptors @_tmp.fsmd.data\n      Object.defineProperty @data, pname, propd\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _copy_other_attributes: ->\n    for pname, propd of Object.getOwnPropertyDescriptors @_tmp.fsmd\n      continue if @_tmp.known_names.has pname\n      Object.defineProperty @, pname, propd\n    return null\n\n\n############################################################################################################\nmodule.exports = Intermatic\n# if globalThis.require? then module.exports        = { Intermatic, }\n# else                        globalThis.Intermatic = Intermatic\n\n\n\n"
  ]
}